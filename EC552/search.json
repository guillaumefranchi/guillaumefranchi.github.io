[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EC5552 : Introduction au langage R",
    "section": "",
    "text": "Bref historique\n\nR est à la fois un logiciel et un langage. Il est gratuit et open source.\nVersion libre et gratuite du langage S développée chez Bell Laboratories par John Chambers (1980).\nRobert Gentleman & Ross Ihaka (Université d’Auckland) proposent une première version de R en 1993.\nR Core Team crée en 1997 assure la maintenance et l’évolution de R.\nCRAN (Comprehensive R Archive Network) regroupe et met à disposition l’ensemble des éléments de R.\n\n\n\nFichiers gérés par R\n\nLes scripts (fichiers .R) : ils contiennent les codes R ainsi que des commentaires sur ces codes.\nLes environnements (fichiers .RData) qui sont des ensembles d’objets.\n\n\n\nInterfaces de R\n\nLa basique : Rgui (déconseillée) composée d’une fenêtre principale appelée la Console à partir de laquelle on exécute les fonctions.\nRStudio : interface graphique utilisée dans ce cours.\n\n\n\n\nRStudio\n\n\n\n\nLes librairies de R (ou packages)\nDe très nombreux packages ont été développés pour R, ils permettent d’ajouter de nouvelles fonctionnalités. Pour installer un package on va dans Tools -&gt; Install Packages\n\n\n\nInstaller un package\n\n\nOn peut par exemple (ne le faites pas) installer le package FactoMineR. Il est très important de demander à R d’installer toutes les dépendances du package. Il faut ensuite charger le package dans le script pour pouvoir l’utiliser.\n\nlibrary(FactoMineR)\n\n\n\nInstaller R et RStudio\nLes deux logiciels sont disponiles à l’adresse  https://posit.co/download/rstudio-desktop/  et peuvent s’installer sur Windows, Mac ou Linux.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1"
  },
  {
    "objectID": "TD1.html",
    "href": "TD1.html",
    "title": "TD1 : Premiers pas dans R",
    "section": "",
    "text": "Dans la console exécuter les lignes suivantes :\n\n1 + 1\n\n[1] 2\n\n\n\npi\n\n[1] 3.141593\n\n\n\nsin(3*pi/2)\n\n[1] -1\n\n\nA partir de maintenant toutes les commandes seront enregistrées dans un fichier script nommé TD1.R.\nPour ce faire : File -&gt; New File -&gt; R Script\nLa plupart des fonctions mathématiques sont définies dans R (librairie base, chargée automatiquement).",
    "crumbs": [
      "TD1 : Premiers pas dans R"
    ]
  },
  {
    "objectID": "TD1.html#variables-de-type-numérique",
    "href": "TD1.html#variables-de-type-numérique",
    "title": "TD1 : Premiers pas dans R",
    "section": "2.1 Variables de type numérique",
    "text": "2.1 Variables de type numérique\n\nx=2\n\n\nclass(x)\n\n[1] \"numeric\"\n\n\n\n## Supprimer x\nrm(x)",
    "crumbs": [
      "TD1 : Premiers pas dans R"
    ]
  },
  {
    "objectID": "TD1.html#variables-contenant-des-caractères-on-utilise",
    "href": "TD1.html#variables-contenant-des-caractères-on-utilise",
    "title": "TD1 : Premiers pas dans R",
    "section": "2.2 Variables contenant des caractères (on utilise \"\")",
    "text": "2.2 Variables contenant des caractères (on utilise \"\")\n\nx &lt;- \"bonjour\"\nprint(x)\n\n[1] \"bonjour\"\n\n\nRemarque : On peut affecter une valeur à une variable avec le signe =, ou bien avec &lt;-.\n\nclass(x)\n\n[1] \"character\"",
    "crumbs": [
      "TD1 : Premiers pas dans R"
    ]
  },
  {
    "objectID": "TD1.html#variables-contenant-des-booléens-vrai-ou-faux",
    "href": "TD1.html#variables-contenant-des-booléens-vrai-ou-faux",
    "title": "TD1 : Premiers pas dans R",
    "section": "2.3 Variables contenant des booléens (Vrai ou Faux)",
    "text": "2.3 Variables contenant des booléens (Vrai ou Faux)\n\nx &lt;- TRUE\nprint(x)\n\n[1] TRUE\n\n\n\nclass(x)\n\n[1] \"logical\"",
    "crumbs": [
      "TD1 : Premiers pas dans R"
    ]
  },
  {
    "objectID": "TD1.html#création-dun-vecteur",
    "href": "TD1.html#création-dun-vecteur",
    "title": "TD1 : Premiers pas dans R",
    "section": "3.1 Création d’un vecteur",
    "text": "3.1 Création d’un vecteur\n\nVia la fonction c() (pour combine).\n\n\na1 &lt;- c(1.5,2,3.2,-1.5,0,-1)\na2 &lt;- c(\"fille\",\"garçon\",\"fille\",\"fille\",\"fille\",\"fille\")\na3 &lt;- c(TRUE,FALSE,TRUE,TRUE)\n\n\nclass(a1)\n\n[1] \"numeric\"\n\nclass(a2)\n\n[1] \"character\"\n\nclass(a3)\n\n[1] \"logical\"\n\n\nExercice\n\nCombiner les vecteurs a1 et a2 dans un nouveau vecteur a.\nQuelle est la classe du résultat ?\n\n\n\nVoir la correction\na&lt;-c(a1,a2)\nclass(a)\n\n\n\nVia la fonction rep(), qui permet d’écrire n fois la valeur a : rep(a,n)\n\n\nrep(5,10)\n\n [1] 5 5 5 5 5 5 5 5 5 5\n\n\nExercice\nCréer un vecteur avec 5 fois “fille” et 10 fois “garçon”.\n\n\nVoir la correction\na &lt;- c(rep(\"fille\",5),rep(\"garçon\",10))\nprint(a)\n\n\n\nVia la fonction seq(), qui définit une séquence de nombre entre MIN et MAX avec un pas de L : seq(MIN,MAX,by=L)\n\n\nseq(0,1,by=0.1)\n\n [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0\n\nseq(10,20,by=5)\n\n[1] 10 15 20\n\n\n\nOn peut aussi créer des vecteurs d’entiers successifs avec :\n\n\n1:10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n2:7\n\n[1] 2 3 4 5 6 7",
    "crumbs": [
      "TD1 : Premiers pas dans R"
    ]
  },
  {
    "objectID": "TD1.html#indexation-et-longueur-dun-vecteur",
    "href": "TD1.html#indexation-et-longueur-dun-vecteur",
    "title": "TD1 : Premiers pas dans R",
    "section": "3.2 Indexation et longueur d’un vecteur",
    "text": "3.2 Indexation et longueur d’un vecteur\n\nLa fonction length() permet de calculer le nombre de valeurs d’un vecteur (quelle que soit la nature du vecteur considéré).\n\n\nlength(a1)\n\n[1] 6\n\nlength(a2)\n\n[1] 6\n\n\n\nChaque élément d’un vecteur est repéré par un indice entre [].\n\n\na1[1]\n\n[1] 1.5\n\na1[3]\n\n[1] 3.2\n\n\n\nOpérations sur les éléments d’un vecteur :\n\n\na1[1]+a1[3]\n\n[1] 4.7\n\na1[1]/a1[3]\n\n[1] 0.46875\n\n\n\nOn peut changer la valeur de a1[3] en lui affectant une nouvelle valeur :\n\n\na1[3] &lt;- -3\na1\n\n[1]  1.5  2.0 -3.0 -1.5  0.0 -1.0\n\n\n\nOn peut aussi ajouter de nouvelles valeurs au vecteur.\n\n\na1[12]&lt;-10\na1[13]&lt;-11\na1\n\n [1]  1.5  2.0 -3.0 -1.5  0.0 -1.0   NA   NA   NA   NA   NA 10.0 11.0\n\n\n\nOn peut effectuer les opérations précédentes sur plusieurs valeurs du vecteur.\n\n\na1[c(12,13)] &lt;- c(99,100)\na1\n\n [1]   1.5   2.0  -3.0  -1.5   0.0  -1.0    NA    NA    NA    NA    NA  99.0\n[13] 100.0\n\na1[7:11] &lt;- 94:98\na1\n\n [1]   1.5   2.0  -3.0  -1.5   0.0  -1.0  94.0  95.0  96.0  97.0  98.0  99.0\n[13] 100.0",
    "crumbs": [
      "TD1 : Premiers pas dans R"
    ]
  },
  {
    "objectID": "TD1.html#les-calculs-de-base-avec-un-vecteur",
    "href": "TD1.html#les-calculs-de-base-avec-un-vecteur",
    "title": "TD1 : Premiers pas dans R",
    "section": "3.3 Les calculs de base avec un vecteur",
    "text": "3.3 Les calculs de base avec un vecteur\n\nOn peut ajouter, soustraire, multiplier des vecteurs entre eux à condition qu’ils soient de même longeur et qu’ils soient numériques.\n\nLes opérations sont alors effectuées terme à terme.\n\na1 &lt;- seq(10,20,by=1)\na2 &lt;- seq(20,30,by=1)\na1+a2\n\n [1] 30 32 34 36 38 40 42 44 46 48 50\n\na2-a1\n\n [1] 10 10 10 10 10 10 10 10 10 10 10\n\na1*a2\n\n [1] 200 231 264 299 336 375 416 459 504 551 600\n\na2/a1\n\n [1] 2.000000 1.909091 1.833333 1.769231 1.714286 1.666667 1.625000 1.588235\n [9] 1.555556 1.526316 1.500000\n\na1^2*log(a2)\n\n [1]  299.5732  368.3872  445.1101  529.8985  622.8986  724.2471  834.0727\n [8]  952.4969 1079.6343 1215.5938 1360.4790\n\n\n\nAttention : si les vecteurs ne sont pas de la même longueur, les éléments du vecteur le plus court sont recyclés.\n\n\na1 &lt;- c(1,2,3)\na2 &lt;- 1:10\na1+a2\n\nWarning in a1 + a2: la taille d'un objet plus long n'est pas multiple de la\ntaille d'un objet plus court\n\n\n [1]  2  4  6  5  7  9  8 10 12 11",
    "crumbs": [
      "TD1 : Premiers pas dans R"
    ]
  },
  {
    "objectID": "TD1.html#exercice-1",
    "href": "TD1.html#exercice-1",
    "title": "TD1 : Premiers pas dans R",
    "section": "6.1 Exercice 1",
    "text": "6.1 Exercice 1\n\nCréer le vecteur x contenant le nom des villes suivantes Nantes, Brest, Rennes, Angers, Le Mans.\nAfficher le premier élément de x.\nAfficher tous les éléments de x sauf le premier.\nAfficher les trois premiers éléments de x.\nAfficher le deuxième et le quatrième élément de x.\nClasser les éléments de x dans l’ordre alphabétique puis anti-alphabétique grâce aux fonctions sort et rev.",
    "crumbs": [
      "TD1 : Premiers pas dans R"
    ]
  },
  {
    "objectID": "TD1.html#exercice-2",
    "href": "TD1.html#exercice-2",
    "title": "TD1 : Premiers pas dans R",
    "section": "6.2 Exercice 2",
    "text": "6.2 Exercice 2\n\nCréer un vecteur y contenant les entiers pairs inférieurs à 100 grâce à la fonction seq().\nAjouter à y les entiers impairs inférieurs à 100. On stockera la valeur obtenue dans une variable S.\nDéterminer la taille du vecteur S final.\nA l’aide de la fonction rep() créer un vecteur sonnette contenant 4 fois « ding » puis 4 fois « dong ».\nA l’aide de la fonction sample() créer un vecteur melodie contenant une succession aléatoire de « ding » et de « dong » de taille 100.\nGrâce à la fonction table(), déterminer combien il y a de « ding » et combien il y a de « dong » dans melodie.",
    "crumbs": [
      "TD1 : Premiers pas dans R"
    ]
  },
  {
    "objectID": "TD1.html#exercice-3",
    "href": "TD1.html#exercice-3",
    "title": "TD1 : Premiers pas dans R",
    "section": "6.3 Exercice 3",
    "text": "6.3 Exercice 3\n\nGénérer un vecteur x de taille 100 de valeurs tirées selon une loi normale centrée réduite (i.e. de paramètre 0 et 1) grâce à la fonction rnorm().\nCalculer la somme et la moyenne de x à l’aide des fonctions dédiées.\nCalculer le minimum, le premier quartile, la médiane, le troisième quartile et le maximum de x. La fonction quantile() bien utilisée vous donnera toutes ces informations directement…\nGénérer le vecteur booléen indiquant si les nombres contenus dans x sont positifs (TRUE) ou non (FALSE).\nMême question pour indiquer si les nombres sont compris entre -1 et 1.\nAfficher les indices des valeurs négatives de x.\nAfficher la valeur absolue des valeurs de x.\nAfficher la partie entière des valeurs de x.\nAfficher uniquement les valeurs positives de x.\nRemplacer les valeurs négatives de x par 0. Vérifier le remplacement.",
    "crumbs": [
      "TD1 : Premiers pas dans R"
    ]
  }
]