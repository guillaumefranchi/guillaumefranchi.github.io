---
title: "TD2 : Les matrices"
number-sections: true
number-depth: 2
number-offset: 0
---

Les matrices sont, comme en mathématiques, des tableaux de données. ***Attention***, comme pour les vecteurs les matrices ne contiendront que des éléments du même type (numérique, texte, booléen).

Toutes les commandes seront enregistrées dans un fichier script nommé TD2.R.

# Définition

- Une matrice se définit simplement avec la fonction `matrix()`. 

```{r eval=TRUE}
A <- matrix(c(1,2,3,
           2,1,-1,
           -3,-1,1),nrow=3)
A
```

- Les matrices diagonales peuvent se définir avec la fonction `diag()`.

```{r eval=TRUE}
B <- diag(x=c(1,2,3))
B
```


- La dimension d'une matrice est donnée par `dim()`.

```{r eval=TRUE}
dim(A)
```

Le résultat est un vecteur ayant deux éléments : le nombre de lignes et le nombre de colonnes.

# Indexation des éléments d'une matrice

- Les éléments d'une matrice sont identifiés par un numéro de ligne et de colonne entre crochets *A\[i,j\]*.

```{r eval=TRUE}
A[1,2]
# première ligne de A 
A[1,]
# première colonne de A
A[,1]
```

- Comme pour les vecteurs, on peut alors modifier un ou plusieurs coefficient de la matrice.

```{r eval=TRUE}
A[1,1] <- -1
A
A[2,] <- c(-10,-20,-30)
A
A[1:2,3] <- c(1000,2000)
A
```

# Opérations sur les matrices

- Si deux matrices sont de même dimension, on peut naturellement effectuer des opérations terme à terme *(addition, multiplication, puissance,...)*.

```{r eval=TRUE}
A1 <- matrix(c(1,1,1,
                -1,-1,-1,
                2,2,2),nrow = 3)
A1
A2 <- matrix(c(1,2,3,
               4,5,6,
               7,8,9),nrow = 3,byrow = TRUE)
A2
A1+A2
A1*A2
A1^A2
```

- La transposée d'une matrice s'obtient avec la fonction `t()`.

```{r eval=TRUE}
t(A1)
```

- La multiplication de deux matrices, au sens mathématique du terme, s'effectue avec `%*%`.

```{r eval=TRUE}
A1%*%A2
```

- Les fonctions `colSums()` et `rowSums()` permettent de calculer la somme sur les colonnes et sur les lignes d'une matrice.

```{r eval=TRUE}
colSums(A1)
rowSums(A1)
```

- Enfin, comme avec les vecteurs, on peut effectuer des tests sur les matrices.

```{r eval=TRUE}
B==0
```

# Exercices

## Exercice 1

1.  Générer un vecteur *fillmat* contenant 250 valeurs tirées selon une loi uniforme continue de paramètres 0 et 10 grâce à la fonction `runif()`.

2.  Créer une matrice *Mesures* de 50 lignes et 5 colonnes contenant les valeurs de *fillmat*. Les colonnes seront nommées Mesure1,..., Mesure5 *(on utilisera la fonction `colnames()`)*.

3.  Créer un vecteur *Groupe* de taille 50 contenant des valeurs entières aléatoires entre 1 et 5 *(fonction `sample()`)*. On interprétera *Groupe* comme le groupe d'appartenance des 50 lignes de Mesures. Ajouter cette colonne à la matrice *Mesures*.

4.  Combien de lignes appartiennent au groupe n°2 ?

5.  Afficher le numéro des lignes appartenant au groupe n°2.

6.  Afficher les lignes de *Mesures* correspondant au groupe n°2.

7.  Déterminer combien *Mesures* contient de valeurs inférieures à 5 (on exclura la colonne *Groupe* du comptage).

8.  Calculer la moyenne des valeurs de *Mesures* correspondant au groupe n°4.


9.  Même question, mais pour les 3 premières colonnes uniquement.


10. Appliquer à *Mesures* les fonctions `dim()`, `ncol()` et `nrow()`. A quoi correspondent ces nombres ?

## Exercice 2

1. Créer la matrice *mat* avec les instructions

```{r}
values <- c(1,0,3,4,5,5,0,4,5,6,3,4,0,1,3,2)
mat <- matrix(values,nrow=4)
```

2. Créer le vecteur *vec* composé des éléments diagonaux de *mat*.

3. Créer la matrice *submat* contenant les 2 premières ligens de *mat*, et la matrice *submat2* contenant les deux dernières colonnes de *mat*. Quelles sont les dimensions de ces matrices ?

4. Créer la matrice *smallmat* composée des colonnes de *mat* dont ***tous*** les éléments sont strictement inférieurs à 5.

5. Créer ensuite la matrice *notzero* composée des lignes de *mat* dont ***tous*** les éléments sont non nuls.

6. Créer une matrice *mat2* avec l'instruction :

```{r}
mat2 <- matrix(1:16,nrow = 4)
```

puis comparer les instructions `mat * mat2`et `mat %*% mat2`.